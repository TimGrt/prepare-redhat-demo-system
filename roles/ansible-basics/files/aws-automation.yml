---

- name: Project AWS Automation - Sample Solution
  hosts: localhost
  module_defaults:
    group/aws:
      region: eu-central-1
  tasks:
    - name: Ensure AWS credentials are set
      ansible.builtin.assert:
        that:
          - ansible_env.AWS_ACCESS_KEY_ID is defined
          - ansible_env.AWS_SECRET_ACCESS_KEY is defined
        quiet: true
        fail_msg: |
          No environment variables with AWS credentials found!
          Set the variables with:
            export AWS_ACCESS_KEY_ID='AK123'
            export AWS_SECRET_ACCESS_KEY='abc123'

    - name: Get information about AMI (initial connection test)
      amazon.aws.ec2_ami_info:
        image_ids: ami-06c39ed6b42908a36
      register: ami_info

    - name: Output info about AMI
      ansible.builtin.debug:
        msg: "{{ ami_info.images }}"

    - name: Create SSH keypair
      community.crypto.openssh_keypair:
        path: "{{ ansible_env.HOME }}/.ssh/workshop"
        size: 2048

    - name: Create SSH keypair in AWS using key created before
      amazon.aws.ec2_key:
        name: workshop
        key_material: "{{ lookup('file', ansible_env.HOME + '/.ssh/workshop.pub') }}"

    - name: Get info about default VPC
      amazon.aws.ec2_vpc_net_info:
        filters:
          "is-default": true
      register: vpc_info

    - name: Set variable with ID of default VPC
      ansible.builtin.set_fact:
        default_vpc_id: "{{ vpc_info.vpcs.0.vpc_id }}"

    - name: Create Security group which allows SSH access from all hosts
      amazon.aws.ec2_security_group:
        name: workshop-sg
        description: Security group created by Ansible
        vpc_id: "{{ default_vpc_id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0

    - name: Start a t2.micro instance with a public IP address
      amazon.aws.ec2_instance:
        name: workshop-instance1
        key_name: workshop
        instance_type: t2.micro
        security_group: workshop-sg
        network:
          assign_public_ip: true
        image_id: ami-06c39ed6b42908a36
        tags:
          Environment: Testing
        state: running

    - name: Gather information about any instance with a tag key Name and value Example
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": workshop-instance1
          instance-state-name: running
      register: instance_info

    - name: Output public IP address of EC2 workshop-instance1
      ansible.builtin.debug:
        msg: "{{ instance_info.instances.0.public_dns_name }}"
